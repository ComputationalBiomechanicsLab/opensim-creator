Create Eigen-like wrapper for ADOL-C and its drivers, so that I am passing
around Vectors, not C-style arrays.

Nocedal's book says to use partial separability for auto diff, and also that
you can get benefits by evalulating the objective and constraints at the same
time, in case they share a lot of the computaitonal graph.

Move ADOL-C code from IPOPTSolver::TNLP to Problem<adouble>.

Trying non-virtual interface for Problem, but a Decorator class could
 be preferable.

 For finite diff version (with doubles), make SURE to use Map<Matrix> to
 avoid copying the variables (x). For adouble, it's fine and necessary (for
 the autodiff conversion), but is NOT necessary for doubles.

 TODO still allow users to specify their own derivatives even if using doubles?

 For Eigen, use mat.setZero() instead of static Mat::Zero() as much as possible.

 Rename AbstractProblem to OptimizationProblemBase?

 Eigen has spline support.

 linear tangent steering example.

 Integrate Optizelle solver! KNITRO solver!!

List of optimization solvers:
http://plato.asu.edu/sub/nlores.html#general

Linear solvers:
http://www.netlib.org/utk/people/JackDongarra/la-sw.html
Also, PETSc (suggested by Millard's colleague):
> Large scale sparse linear systems are usually solved iteratively with
> Krylov subspace methods like Conjugate Gradient. He may have a look at
> the Krylov subspace solver implementations in PETSc
> (http://www.mcs.anl.gov/petsc/). There are plenty of them to try. PETSc
> offers a C interface (I think a MATLAB interface is available for some
> features) and many algorithms are already parallelized with MPI and
> CUDA.

Automatically generate a nice initial guess:
//// TODO no initial guess; midpoint between bounds, or 0 if no bounds?
    //Iterate initial_guess = ocp->make_guess_template();
    //Solution solution = dircol.solve(initial_guess);


Test problems with scenarios where the tendon would buckle (MTU length <
slack length)

Name for project: OptoMusk (optimizing musculoskeletal)
NMSOpt
Neuromusculoskeletal Optimization
nemuskopt

MuST: Muscolo Skeletal Tracking
MuSOC:Muscolo Skeletal Optimal Control

COLLOSIM, COLLOSIUM, COLLOSSAL ;)

Muscolo
Moco

NMSTO
TONMS

Runner

Nimble
Cursory
Muscop
Muskop

mutrop
tropics
tropical
tropism

Collaboratory, Collabrocate, collocate

Tropter


Dexterous (capable of many things....)

Names of animals...cheetah, etc.
Names of famous researchers (Muybridge)

DICOMO (direct collocation for musculoskeletal systems)
DICOMU
DICOMS

Indygo

add "printProblemInfo()" to display the values of variable bounds, the number
 of constraints, the number of dynamics whatever, etc. For debugging.

# iCub provides Ipopt binaries but not for msvc14.
http://wiki.icub.org/wiki/Installing_IPOPT
http://www.icub.org/download/packages/windows/


first: install wget in cygwin and run get.Blas, etc in each subdirectory.

Mixing MSVC with gfortran:
http://stackoverflow.com/questions/3320017/mix-gfortran-msvc-objects-when-linking-undefined-reference-to-chkstk

./configure --prefix=... --with-blas=BUILD --with-lapack=BUILD --enable-msvc
--enabled-shared=yes
enable-shared forces use of dynamic runtime (MSVC), which must be consistent
across all libraries.
must tell ifort where msvc's link.exe is, by editing ifort.cfg

Does linking to gfortran.lib make the resulting binary viral?
https://cournape.wordpress.com/2009/03/09/gfortran-visual-studio/

LibraryHandler.c(25) fatal error C1189: Do not have function for save
printing into a C-string (snprintf or _snprintf). I edited the configured
config.h to have #define HAVE_SNPRINTF.

dos2unix: must have this installed. this fixes the SLURRY of link errors
(undefined symbol...)

ampl is being built and statically linked to, even though i don't have it?

add option to build IPOPT static libraries MD_StaticRelease vs
MD_DynamicRelease: mismatch.

Cannot link StaticRelease vs DynamicRelease; inconsistent with Ipopt.
Make sure IPOPT is compiled with /MD instead of /MT
http://stackoverflow.com/questions/14714877/mismatch-detected-for-runtimelibrary


lnk1104: cannot open file 'ifconsol.lib'
call "%IFORT_COMPILER17%bin\ifortvars.bat" intel64
http://stackoverflow.com/questions/39683544/error-lnk1104-cannot-open-file-ifconsol-lib-using-f2py-and-intel-fortran

FFLAGS='-MD -O3 -fpp -nologo
CFLAGS='-MD -O2 -nologo -wd4996 -D_CRT_SECURE_NO_DEPRECATE -DNDEBUG   '
CXXFLAGS='-MD -O2 -nologo -EHsc -GR -wd4996 -D_CRT_SECURE_NO_DEPRECATE
-DNDEBUG   '

OPT_CFLAGS='-MD -O2 -nologo -wd4996 -D_CRT_SECURE_NO_DEPRECATE -DNDEBUG   '
OPT_CXXFLAGS='-MD -O2 -nologo -EHsc -GR -wd4996 -D_CRT_SECURE_NO_DEPRECATE
-DNDEBUG   '
OPT_FFLAGS='-MD -O3 -fpp -nologo  '

http://list.coin-or.org/pipermail/ipopt/2010-September/002118.html
http://stackoverflow.com/questions/10113017/setting-the-msvc-runtime-in-cmake
http://stackoverflow.com/questions/14714877/mismatch-detected-for
-runtimelibrary

How appveyor is built on appveyor (using mingw):

https://github.com/chrisdembia/Ipopt/blob/master/appveyor.yml

IPOPT wiki, notes for compiling on windows:
https://projects.coin-or.org/BuildTools/wiki/current-issues
https://projects.coin-or.org/Ipopt/wiki/CompilationHints

CasADi notes on building IPOPT on windows:
https://groups.google.com/forum/#!topic/casadi-users/51stEY211XQ

Julia issue about IPOPT
https://github.com/JuliaOpt/Ipopt.jl/issues/27

Compiling MUMPS on windows, conflict between link.exe from cygwin and ifortran:
http://list.coin-or.org/pipermail/ipopt/2009-July/001647.html


Can we compile MUMPS with gfortran and use that library with Ipopt compiled
with MSVC? chrome-extension://klbibkeccnjlkjkiokjodocebajanakg/suspended.html#uri=http://stackoverflow.com/questions/3320017/mix-gfortran-msvc-objects-when-linking-undefined-reference-to-chkstk

Ipopt compiling on windows instructions:
https://www.coin-or.org/Ipopt/documentation/node15.html#CygwinInstall


ADOL-C source code downloads: https://www.coin-or.org/download/source/ADOL-C/

Resources about licensing:
(amazing q&a) https://www.whitesourcesoftware
.com/whitesource-blog/top-10-apache-license-questions-answered/?utm_content=Is-the-MIT-license-compatible-with-the-Apache&utm_medium=social&utm_source=quora&utm_term=blog-top-10-apache-license-questions-answered
https://www.apache.org/legal/resolved#category-b
https://opensource.com/law/11/9/mpl-20-copyleft-and-license-compatibility
https://softwareengineering.stackexchange.com/questions/227639/can-i-use-apache-software-license-version-2-0-and-gnu-lgpl-3-licence-plugins-in
https://projects.coin-or.org/ADOL-C
https://projects.coin-or.org/Ipopt/wiki/FAQ
https://en.wikipedia.org/wiki/CeCILL
http://www.cecill.info/faq.en.html#enfrance
https://choosealicense.com/licenses/
http://eigen.tuxfamily.org/index.php?title=Licensing_FAQ
http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html#mention
https://www.apache.org/licenses/LICENSE-2.0
https://www.gnu.org/licenses/lgpl-3.0.txt


GFortran and MSVC
=================
https://stackoverflow.com/questions/7281794/linking-mixed-fortran-and-c-in-the-visual-studio-2008-environment
https://blog.kitware.com/fortran-for-cc-developers-made-easier-with-cmake/

Ipopt binaries on Windows: https://www.coin-or.org/download/binary/Ipopt/
https://www.coin-or.org/Ipopt/documentation/node15.html

WinRPM, openSUSE win64?? https://github.com/JuliaOpt/Ipopt.jl/issues/27
https://discourse.julialang.org/t/windows-c-binary-compatibility-mingw-vs-msvc/1250/12

Pseudocode
==========

Hanging mass lift with minimum effort:
TomuProblem p;
p.setModel(pendulum);
MuscleActivationCost cost;
cost.setPower(2);
p.addGoal(cost);
p.setTimeBounds(0, 1);
p.setStateBounds("position", {-5, 5}, -2, 2);
p.setStateBounds("speed", {-10, 10}, 0, 0);

TomuGuess g(p);
g.setStateGuess("position", Vector(

TomuSolver solver(p);
Solution solution = solver.solve();
Solution solution = solver.solve(g);
Result r = solver.solve(); // too many "s"s.






# This file can be used by the clang-format tool to 
# automatically format C++ source code.
# See https://clang.llvm.org/docs/ClangFormat.html.
# You can either run clang-format directly, or you can use
# Integrated Development Environments (IDEs) that support clang-format,
# such as:
#  - Visual Studio (https://devblogs.microsoft.com/cppblog/clangformat-support-in-visual-studio-2017-15-7-preview-1/),
#  - CLion (https://www.jetbrains.com/help/clion/clangformat-as-alternative-formatter.html).
# See the documentation for IDEs for more information.
---
Language:        Cpp
AccessModifierOffset: -4
AlignAfterOpenBracket: AlwaysBreak
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
AlignEscapedNewlines: Right
AlignOperands:   true
AlignTrailingComments: false
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortBlocksOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: false
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: true
BinPackArguments: false
BinPackParameters: false
BraceWrapping:
  AfterClass:      true
  AfterControlStatement: false
  AfterEnum:       false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Attach
#BreakBeforeConceptDeclarations: true
BreakBeforeInheritanceComma: false
BreakBeforeTernaryOperators: true
BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: AfterColon
BreakStringLiterals: false
ColumnLimit: 120
CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: true
#ConstructorInitializerIndentWidth: 8
#ContinuationIndentWidth: 8
Cpp11BracedListStyle: true
#DeriveLineEnding: true
DerivePointerAlignment: false
DisableFormat:   false
ExperimentalAutoDetectBinPacking: false
FixNamespaceComments: false
IncludeBlocks:   Preserve

#IndentCaseBlocks: false
IndentCaseLabels: false
#IndentPPDirectives: BeforeHash
#IndentPragmas: true
IndentWidth: 4
IndentWrappedFunctionNames: true

KeepEmptyLinesAtTheStartOfBlocks: true
NamespaceIndentation: All

PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
# PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 60

PointerAlignment: Left
ReflowComments:  true
SortIncludes:    true
SortUsingDeclarations: true

SpaceAfterCStyleCast: false
SpaceAfterTemplateKeyword: false
SpaceBeforeAssignmentOperators: true
# SpaceBeforeCpp11BracedList: false  # broke in VS2017
# SpaceBeforeCtorInitializerColon: true  # broke in VS2017
# SpaceBeforeInheritanceColon: true  # broke in VS2017
SpaceBeforeParens: ControlStatements
#SpaceBeforeRangeBasedLoopColon: true
#SpaceBeforeSquareBrackets: false
#SpaceInEmptyBlock: false
#SpaceInEmptyParenthesis: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: false
#SpacesInCStyleCastParenthesis: false
#SpacesInConditionalStatement: false
SpacesInContainerLiterals: false
#SpacesInParenthesis: false
SpacesInSquareBrackets: false
Standard: Cpp11
TabWidth: 4
#UseCRLF: false
UseTab: Never
...

